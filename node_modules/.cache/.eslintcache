[{"/Users/pavel/Documents/GitHub/test-task-avito/src/index.tsx":"1","/Users/pavel/Documents/GitHub/test-task-avito/src/App.tsx":"2","/Users/pavel/Documents/GitHub/test-task-avito/src/redux/store.ts":"3","/Users/pavel/Documents/GitHub/test-task-avito/src/theme.ts":"4","/Users/pavel/Documents/GitHub/test-task-avito/src/redux/slices/pagesSlice.ts":"5","/Users/pavel/Documents/GitHub/test-task-avito/src/redux/slices/gamesSlice.ts":"6","/Users/pavel/Documents/GitHub/test-task-avito/src/components/Header/index.tsx":"7","/Users/pavel/Documents/GitHub/test-task-avito/src/pages/MainPage/index.tsx":"8","/Users/pavel/Documents/GitHub/test-task-avito/src/pages/GamePage/index.tsx":"9","/Users/pavel/Documents/GitHub/test-task-avito/src/hooks.ts":"10","/Users/pavel/Documents/GitHub/test-task-avito/src/utils/toEngGenre.ts":"11","/Users/pavel/Documents/GitHub/test-task-avito/src/utils/toEngSortBy.ts":"12","/Users/pavel/Documents/GitHub/test-task-avito/src/utils/createPages.ts":"13","/Users/pavel/Documents/GitHub/test-task-avito/src/utils/toEngPlatform.ts":"14","/Users/pavel/Documents/GitHub/test-task-avito/src/components/Pagination/index.tsx":"15","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FIlters/index.tsx":"16","/Users/pavel/Documents/GitHub/test-task-avito/src/components/Items/index.tsx":"17","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FullGameRight/index.tsx":"18","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FullGameLeft/index.tsx":"19","/Users/pavel/Documents/GitHub/test-task-avito/src/components/Items/item.tsx":"20","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FIlters/Filter.tsx":"21","/Users/pavel/Documents/GitHub/test-task-avito/src/redux/types/types.ts":"22"},{"size":350,"mtime":1693143305329,"results":"23","hashOfConfig":"24"},{"size":800,"mtime":1693130431314,"results":"25","hashOfConfig":"24"},{"size":356,"mtime":1693131539281,"results":"26","hashOfConfig":"24"},{"size":321,"mtime":1693127564855,"results":"27","hashOfConfig":"24"},{"size":600,"mtime":1693129956929,"results":"28","hashOfConfig":"24"},{"size":2414,"mtime":1693148797598,"results":"29","hashOfConfig":"24"},{"size":685,"mtime":1693073773282,"results":"30","hashOfConfig":"24"},{"size":2869,"mtime":1693149963988,"results":"31","hashOfConfig":"24"},{"size":4104,"mtime":1693148703344,"results":"32","hashOfConfig":"24"},{"size":312,"mtime":1693071326276,"results":"33","hashOfConfig":"24"},{"size":2560,"mtime":1693071238988,"results":"34","hashOfConfig":"24"},{"size":370,"mtime":1693071238989,"results":"35","hashOfConfig":"24"},{"size":492,"mtime":1693071238987,"results":"36","hashOfConfig":"24"},{"size":268,"mtime":1693071238989,"results":"37","hashOfConfig":"24"},{"size":2331,"mtime":1693149761364,"results":"38","hashOfConfig":"24"},{"size":1915,"mtime":1693071238914,"results":"39","hashOfConfig":"24"},{"size":1083,"mtime":1693130066307,"results":"40","hashOfConfig":"24"},{"size":4538,"mtime":1693141866635,"results":"41","hashOfConfig":"24"},{"size":2221,"mtime":1693130041527,"results":"42","hashOfConfig":"24"},{"size":1026,"mtime":1693071238925,"results":"43","hashOfConfig":"24"},{"size":3306,"mtime":1693072336180,"results":"44","hashOfConfig":"24"},{"size":1931,"mtime":1693130177855,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"evv1z3",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pavel/Documents/GitHub/test-task-avito/src/index.tsx",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/App.tsx",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/redux/store.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/theme.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/redux/slices/pagesSlice.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/redux/slices/gamesSlice.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/components/Header/index.tsx",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/pages/MainPage/index.tsx",["121","122"],[],"import { useContext, useEffect, useState } from \"react\";\nimport { Filters } from \"../../components/FIlters\";\nimport { ThemeContext } from \"cutie-ui\";\nimport { Items } from \"../../components/Items\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { setCurrentPage, setGamesData } from \"../../redux/slices/pagesSlice\";\nimport { getData, setLoadingStatus } from \"../../redux/slices/gamesSlice\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { createPages } from \"../../utils/createPages\";\nimport { toEngGenre } from \"../../utils/toEngGenre\";\nimport { toEngPlatform } from \"../../utils/toEngPlatform\";\nimport { toEngSortBy } from \"../../utils/toEngSortBy\";\nimport { Status } from \"../../redux/types/types\";\n\nexport const MainPage = () => {\n  const dispatch = useAppDispatch();\n  const data = useAppSelector((state) => state.games.data);\n\n  // ========================== Theme change =============================\n  // const [theme, setTheme] = useState<\"dark\" | \"light\" | \"system\">(\"system\");\n  const theme = \"system\";\n  const { changeTheme } = useContext(ThemeContext);\n  useEffect(() => {\n    changeTheme(theme);\n  }, [theme]);\n  // =================================================================\n\n  const [platform, setPlatform] = useState(\"Все платформы\");\n\n  const [genre, setGenre] = useState(\"Все\");\n\n  const [sortBy, setSortBy] = useState(\"Релевантности\");\n\n  useEffect(() => {\n    const enSortBy = toEngSortBy(sortBy);\n    const enPlatform = toEngPlatform(platform);\n    const enGenre = toEngGenre(genre);\n\n    dispatch(\n      getData({ sortBy: enSortBy, genre: enGenre, platform: enPlatform })\n    );\n\n    dispatch(setGamesData(data));\n    dispatch(setCurrentPage(1));\n\n    return () => {\n      dispatch(setLoadingStatus(Status.LOADING));\n    };\n  }, [platform, genre, sortBy]);\n\n  // ========================== Pagination =============================\n  const { currentPage, perPage } = useAppSelector((state) => state.pages);\n  const totalCount = data.length;\n  const pagesCount = Math.ceil(totalCount / perPage);\n  const startIndex = (currentPage - 1) * perPage;\n  const endIndex = startIndex + perPage;\n  const currentGames = data.slice(startIndex, endIndex);\n\n  const pages: number[] = [];\n  createPages(pages, pagesCount, currentPage);\n  // =================================================================\n\n  return (\n    <div className=\"container\">\n      <Filters\n        platform={platform}\n        setPlatform={setPlatform}\n        genre={genre}\n        setGenre={setGenre}\n        sortBy={sortBy}\n        setSortBy={setSortBy}\n      />\n      <Items currentGames={currentGames} />\n      {data[0]?.title ? (\n        <Pagination\n          currentPage={currentPage}\n          pages={pages}\n          pagesCount={pagesCount}\n        />\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/pages/GamePage/index.tsx",["123","124","125","126","127","128"],[],"import styles from \"./GamePage.module.scss\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  getOneGame,\n  setGameLoadingStatus,\n} from \"../../redux/slices/gamesSlice\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { FullGameLeft } from \"../../components/FullGameLeft\";\nimport { FullGameRight } from \"../../components/FullGameRight\";\nimport { Button, Icon, Loader } from \"cutie-ui\";\nimport { Game, Status } from \"../../redux/types/types\";\n\nexport const GamePage = () => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const data = useAppSelector((state) => state.games.currentGameData);\n  const { id } = useParams();\n\n  const handleClickBack = () => {\n    navigate(-1);\n  };\n\n  const [gameData, setGameData] = useState<Game | undefined>(undefined);\n  const loadingStatus = useAppSelector(\n    (state) => state.games.gameLoadingStatus\n  );\n\n  // ================ Реализация сохранения данных игры в Localstorage на 5 минут ===================\n  const currentTime: number = new Date().getTime();\n  const FIVE_MINUTES: number = 5 * 60 * 1000;\n\n  function isCardAvailable(gameId: string) {\n    const localStorageData: string | null = localStorage.getItem(\n      `game_${gameId}`\n    );\n    const storedTime = localStorageData\n      ? JSON.parse(localStorageData).currentTime\n      : null;\n    if (storedTime) {\n      const currentTime: number = new Date().getTime();\n      return currentTime - parseInt(storedTime) <= FIVE_MINUTES;\n    }\n    return false;\n  }\n\n  function addCardToLS(data?: Game) {\n    localStorage.removeItem(`game_${data?.id}`);\n    if (data) {\n      localStorage.setItem(\n        `game_${data.id}`,\n        JSON.stringify({ data, currentTime })\n      );\n    }\n  }\n\n  useEffect(() => {\n    if (id) {\n      const cardAvailable = isCardAvailable(id);\n      if (cardAvailable) {\n        // @ts-ignore\n        const localStorageData = JSON.parse(localStorage.getItem(`game_${id}`));\n        setGameData(localStorageData.data);\n        dispatch(setGameLoadingStatus(Status.SUCCESS));\n      } else {\n        const _id = +id;\n        dispatch(getOneGame({ id: _id }));\n        if (loadingStatus === \"success\") {\n          addCardToLS(data);\n          setGameData(data);\n        } else if (loadingStatus == \"error\") {\n          dispatch(setGameLoadingStatus(Status.ERROR));\n        }\n      }\n    }\n\n    return () => {\n      dispatch(setGameLoadingStatus(Status.LOADING));\n    };\n  }, [loadingStatus]);\n  // ==================================================================================================\n\n  return (\n    <>\n      {loadingStatus == \"loading\" ? (\n        <Loader className={styles.loader} />\n      ) : loadingStatus == \"error\" ? (\n        <div className={styles.error}>\n          <p>Не удалось загрузить игру 😢</p>\n\n          <Button\n            color=\"var(--textPrimary)\"\n            onClick={handleClickBack}\n            variant=\"text2\"\n            className={styles.buttonBack}\n            size=\"large\"\n            startIcon={\n              <Icon>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth={1.5}\n                  stroke=\"currentColor\"\n                  className=\"w-6 h-6\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M15.75 19.5L8.25 12l7.5-7.5\"\n                  />\n                </svg>\n              </Icon>\n            }\n          >\n            Назад\n          </Button>\n        </div>\n      ) : loadingStatus == \"success\" ? (\n        <div className={styles.root}>\n          <div className=\"container\">\n            <div className={styles.gamepage}>\n              <FullGameLeft data={gameData} />\n              <FullGameRight data={gameData} />\n            </div>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/hooks.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/utils/toEngGenre.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/utils/toEngSortBy.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/utils/createPages.ts",["129","130"],[],"export function createPages(\n  pages: number[],\n  pagesCount: number,\n  currentPage: number\n) {\n  if (pagesCount > 10) {\n    if (currentPage > 5) {\n      for (let i = currentPage - 4; i <= currentPage + 5; i++) {\n        pages.push(i);\n        if (i == pagesCount) break;\n      }\n    } else {\n      for (let i = 1; i <= 10; i++) {\n        pages.push(i);\n        if (i == pagesCount) break;\n      }\n    }\n  } else {\n    for (let i = 1; i <= pagesCount; i++) {\n      pages.push(i);\n    }\n  }\n}\n","/Users/pavel/Documents/GitHub/test-task-avito/src/utils/toEngPlatform.ts",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/components/Pagination/index.tsx",["131","132","133"],[],"import { Button, Icon } from \"cutie-ui\";\nimport { useAppDispatch } from \"../../hooks\";\nimport { setCurrentPage } from \"../../redux/slices/pagesSlice\";\nimport styles from \"./Pagination.module.scss\";\n\nexport const Pagination = ({ currentPage, pages, pagesCount }: any) => {\n  const dispatch = useAppDispatch();\n  const onClickNext = () => {\n    dispatch(setCurrentPage(currentPage + 1));\n    window.scrollTo(0, 0);\n  };\n  const onClickPrev = () => {\n    dispatch(setCurrentPage(currentPage - 1));\n    window.scrollTo(0, 0);\n  };\n  const handleClickNumber = (page: number) => {\n    dispatch(setCurrentPage(page));\n    window.scrollTo(0, 0);\n  };\n\n  return (\n    <div className={styles.pagination}>\n      <Button\n        disabled={currentPage == 1}\n        startIcon={\n          <Icon>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1.5}\n              stroke=\"currentColor\"\n              className=\"w-6 h-6\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M15.75 19.5L8.25 12l7.5-7.5\"\n              />\n            </svg>\n          </Icon>\n        }\n        className={styles.prevButton}\n        onClick={onClickPrev}\n      >\n        Назад\n      </Button>\n      <div className={styles.pages}>\n        {pages.map((page: number, i: number) => (\n          <span\n            onClick={() => handleClickNumber(page)}\n            className={currentPage == page ? styles.active : \"\"}\n            key={i}\n          >\n            {page}\n          </span>\n        ))}\n      </div>\n      <Button\n        disabled={currentPage == pagesCount}\n        endIcon={\n          <Icon>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1.5}\n              stroke=\"currentColor\"\n              className=\"w-6 h-6\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M8.25 4.5l7.5 7.5-7.5 7.5\"\n              />\n            </svg>\n          </Icon>\n        }\n        className={styles.nextButton}\n        onClick={onClickNext}\n      >\n        Далее\n      </Button>\n    </div>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FIlters/index.tsx",[],[],"/Users/pavel/Documents/GitHub/test-task-avito/src/components/Items/index.tsx",["134","135","136"],[],"import styles from \"./Items.module.scss\";\nimport { Item } from \"./item\";\nimport { useAppSelector } from \"../../hooks\";\nimport { Loader } from \"cutie-ui\";\nimport { Game } from \"../../redux/types/types\";\n\ninterface ItemsProps {\n  currentGames: Game[];\n}\n\nexport const Items: React.FC<ItemsProps> = ({ currentGames }) => {\n  const loadingStatus = useAppSelector((state) => state.games.loadingStatus);\n\n  return (\n    <div className={styles.root}>\n      {loadingStatus == \"loading\" ? (\n        <Loader className={styles.loader} />\n      ) : loadingStatus == \"error\" ? (\n        <p className={styles.error}>Не удалось загрузить игры 😢</p>\n      ) : loadingStatus == \"success\" ? (\n        currentGames.map((el, i) => {\n          return (\n            <Item\n              key={i}\n              id={el.id}\n              image={el.thumbnail}\n              title={el.title}\n              date={el.release_date}\n              creator={el.developer}\n              genre={el.genre}\n            />\n          );\n        })\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FullGameRight/index.tsx",["137"],[],"import React from \"react\";\nimport styles from \"./FullGameRight.module.scss\";\nimport { Carousel } from \"react-responsive-carousel\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Game } from \"../../redux/types/types\";\n\ninterface FullGameRightProps {\n  data?: Game;\n}\n\nexport const FullGameRight: React.FC<FullGameRightProps> = ({ data }) => {\n  if (!data) return <></>;\n\n  return (\n    <div className={styles.root}>\n      <h2 className={styles.title}>{data.title}</h2>\n      <div className={styles.carousel}>\n        {data.screenshots ? (\n          <Carousel infiniteLoop showStatus={false} showThumbs={false}>\n            {data.screenshots.map((el, i) => (\n              <div key={i}>\n                <img className={styles.carousel__image} src={el.image} />\n              </div>\n            ))}\n          </Carousel>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <p className={styles.subtitle}>Об игре {data.title}</p>\n      <p className={styles.description}>{data.description}</p>\n      <p className={styles.subtitle}>Дополнительная информация</p>\n      <div className={styles.info}>\n        <div className={styles.info__item}>\n          <p className={styles.info__title}>Название</p>\n          <p className={styles.info__value}>{data.title}</p>\n        </div>\n        <div className={styles.info__item}>\n          <p className={styles.info__title}>Разработчик</p>\n          <p className={styles.info__value}>{data.developer}</p>\n        </div>\n        <div className={styles.info__item}>\n          <p className={styles.info__title}>Издатель</p>\n          <p className={styles.info__value}>{data.publisher}</p>\n        </div>\n        <div className={styles.info__item}>\n          <p className={styles.info__title}>Дата релиза</p>\n          <p className={styles.info__value}>\n            {new Date(data.release_date).toLocaleString(\"ru\", {\n              year: \"numeric\",\n              month: \"short\",\n              day: \"numeric\",\n            })}\n          </p>\n        </div>\n        <div className={styles.info__item}>\n          <p className={styles.info__title}>Жанр</p>\n          <p className={styles.info__value}>{data.genre}</p>\n        </div>\n        <div className={styles.info__item}>\n          <p className={styles.info__title}>Платформа</p>\n          <p className={styles.info__value}>{data.platform}</p>\n        </div>\n      </div>\n      <p className={styles.subtitle}>Системные требования</p>\n      <div className={styles.systemreqs}>\n        <div className={styles.systemreqs__column}>\n          <div className={styles.info__item}>\n            <p className={styles.info__title}>ОС</p>\n            <p className={styles.info__value}>\n              {data.minimum_system_requirements?.os\n                ? data.minimum_system_requirements.os\n                : \"Нет данных\"}\n            </p>\n          </div>\n          <div className={styles.info__item}>\n            <p className={styles.info__title}>Оперативная память</p>\n            <p className={styles.info__value}>\n              {data.minimum_system_requirements?.memory\n                ? data.minimum_system_requirements.memory\n                : \"Нет данных\"}\n            </p>\n          </div>\n          <div className={styles.info__item}>\n            <p className={styles.info__title}>Место на жестком диске</p>\n            <p className={styles.info__value}>\n              {data.minimum_system_requirements?.storage\n                ? data.minimum_system_requirements.storage\n                : \"Нет данных\"}\n            </p>\n          </div>\n        </div>\n        <div className={styles.systemreqs__column}>\n          <div className={styles.info__item}>\n            <p className={styles.info__title}>Процессор</p>\n            <p className={styles.info__value}>\n              {data.minimum_system_requirements?.processor\n                ? data.minimum_system_requirements.processor\n                : \"Нет данных\"}\n            </p>\n          </div>\n          <div className={styles.info__item}>\n            <p className={styles.info__title}>Видеокарта</p>\n            <p className={styles.info__value}>\n              {data.minimum_system_requirements?.graphics\n                ? data.minimum_system_requirements.graphics\n                : \"Нет данных\"}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FullGameLeft/index.tsx",["138"],[],"import React from \"react\";\nimport styles from \"./FullGameLeft.module.scss\";\nimport { Button, Icon } from \"cutie-ui\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Game } from \"../../redux/types/types\";\n\ninterface FullGameLeftProps {\n  data?: Game;\n}\n\nexport const FullGameLeft: React.FC<FullGameLeftProps> = ({ data }) => {\n  const navigate = useNavigate();\n\n  const handleClickBack = () => {\n    navigate(-1);\n  };\n\n  if (!data) return <></>;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.sticky}>\n        <Button\n          color=\"var(--textPrimary)\"\n          onClick={handleClickBack}\n          variant=\"text2\"\n          className={styles.buttonBack}\n          size=\"large\"\n          startIcon={\n            <Icon>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1.5}\n                stroke=\"currentColor\"\n                className=\"w-6 h-6\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M15.75 19.5L8.25 12l7.5-7.5\"\n                />\n              </svg>\n            </Icon>\n          }\n        >\n          Назад\n        </Button>\n        <img\n          src={data.thumbnail}\n          alt={`${data.title} image`}\n          className={styles.image}\n        />\n        <a href={data.game_url} target=\"blank\">\n          <Button\n            className={styles.button}\n            variant=\"contained\"\n            endIcon={\n              <Icon>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth={3}\n                  stroke=\"currentColor\"\n                  className=\"w-6 h-6\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3\"\n                  />\n                </svg>\n              </Icon>\n            }\n          >\n            ИГРАТЬ\n          </Button>\n        </a>\n      </div>\n    </div>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/components/Items/item.tsx",["139"],[],"import React from \"react\";\nimport styles from \"./Items.module.scss\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface ItemProps {\n  image: string;\n  title: string;\n  date: string;\n  creator: string;\n  genre: string;\n  id: number;\n}\n\nexport const Item: React.FC<ItemProps> = ({\n  image,\n  title,\n  date,\n  creator,\n  genre,\n  id,\n}) => {\n  const navigate = useNavigate();\n\n  return (\n    <section onClick={() => navigate(\"/\" + id)} className={styles.item}>\n      <img className={styles.image} src={image} alt={`${title} picture`} />\n      <div className={styles.text}>\n        <div className={styles.titleRow}>\n          <h3 className={styles.title}>{title}</h3>\n          <div className={styles.genre}>{genre}</div>\n        </div>\n        <p className={styles.date}>\n          {new Date(date).toLocaleString(\"ru\", {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n          })}\n        </p>\n        <p className={styles.creator}>{creator}</p>\n      </div>\n    </section>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/components/FIlters/Filter.tsx",["140","141"],[],"import styles from \"./Filters.module.scss\";\nimport React, { useState } from \"react\";\n\nimport { Button, Icon, Menu, MenuItem } from \"cutie-ui\";\n\ninterface FilterProps {\n  label: string;\n  setValue: React.Dispatch<React.SetStateAction<any>>;\n  menuItems: string[];\n  currentValue: string;\n}\n\nexport const Filter: React.FC<FilterProps> = ({\n  label,\n  setValue,\n  menuItems,\n  currentValue,\n}) => {\n  const [ancorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const open = Boolean(ancorEl);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  return (\n    <div className={styles.filter}>\n      <p>{label}</p>\n      <Button\n        onClick={handleClick}\n        endIcon={\n          currentValue == \"Браузерные\" ? (\n            <Icon>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1.5}\n                stroke=\"currentColor\"\n                className=\"w-6 h-6\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M9 17.25v1.007a3 3 0 01-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0115 18.257V17.25m6-12V15a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 15V5.25m18 0A2.25 2.25 0 0018.75 3H5.25A2.25 2.25 0 003 5.25m18 0V12a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 12V5.25\"\n                />\n              </svg>\n            </Icon>\n          ) : currentValue == \"Windows\" ? (\n            <Icon>\n              <svg\n                fill=\"var(--primary)\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"64\"\n                height=\"64\"\n                shape-rendering=\"geometricPrecision\"\n                text-rendering=\"geometricPrecision\"\n                image-rendering=\"optimizeQuality\"\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                viewBox=\"0 0 640 640\"\n              >\n                <path d=\"M.2 298.669L0 90.615l256.007-34.76v242.814H.201zM298.658 49.654L639.905-.012v298.681H298.657V49.654zM640 341.331l-.071 298.681L298.669 592V341.332h341.33zM255.983 586.543L.189 551.463v-210.18h255.794v245.26z\" />\n              </svg>\n            </Icon>\n          ) : (\n            <Icon>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1.5}\n                stroke=\"currentColor\"\n                className=\"w-6 h-6\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\"\n                />\n              </svg>\n            </Icon>\n          )\n        }\n        size=\"large\"\n      >\n        {currentValue}\n      </Button>\n      <Menu\n        className={styles.menu}\n        fullWidth\n        anchorEl={ancorEl as any}\n        onClose={handleClose}\n        open={open}\n      >\n        {menuItems.map((el, i) => (\n          <MenuItem onClose={handleClose} onClick={() => setValue(el)} key={i}>\n            {el}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n","/Users/pavel/Documents/GitHub/test-task-avito/src/redux/types/types.ts",[],[],{"ruleId":"142","severity":1,"message":"143","line":25,"column":6,"nodeType":"144","endLine":25,"endColumn":13,"suggestions":"145"},{"ruleId":"142","severity":1,"message":"146","line":49,"column":6,"nodeType":"144","endLine":49,"endColumn":31,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":3,"column":21,"nodeType":"150","messageId":"151","endLine":3,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":71,"column":34,"nodeType":"154","messageId":"155","endLine":71,"endColumn":36},{"ruleId":"142","severity":1,"message":"156","line":80,"column":6,"nodeType":"144","endLine":80,"endColumn":21,"suggestions":"157"},{"ruleId":"152","severity":1,"message":"153","line":85,"column":22,"nodeType":"154","messageId":"155","endLine":85,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":87,"column":25,"nodeType":"154","messageId":"155","endLine":87,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":119,"column":25,"nodeType":"154","messageId":"155","endLine":119,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":10,"column":15,"nodeType":"154","messageId":"155","endLine":10,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":15,"column":15,"nodeType":"154","messageId":"155","endLine":15,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":24,"column":31,"nodeType":"154","messageId":"155","endLine":24,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":52,"column":36,"nodeType":"154","messageId":"155","endLine":52,"endColumn":38},{"ruleId":"152","severity":1,"message":"153","line":60,"column":31,"nodeType":"154","messageId":"155","endLine":60,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":16,"column":22,"nodeType":"154","messageId":"155","endLine":16,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":18,"column":25,"nodeType":"154","messageId":"155","endLine":18,"endColumn":27},{"ruleId":"152","severity":1,"message":"153","line":20,"column":25,"nodeType":"154","messageId":"155","endLine":20,"endColumn":27},{"ruleId":"158","severity":1,"message":"159","line":22,"column":17,"nodeType":"160","endLine":22,"endColumn":74},{"ruleId":"161","severity":1,"message":"162","line":50,"column":9,"nodeType":"160","endLine":54,"endColumn":11},{"ruleId":"161","severity":1,"message":"162","line":26,"column":7,"nodeType":"160","endLine":26,"endColumn":76},{"ruleId":"152","severity":1,"message":"153","line":34,"column":24,"nodeType":"154","messageId":"155","endLine":34,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":51,"column":28,"nodeType":"154","messageId":"155","endLine":51,"endColumn":30},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeTheme'. Either include it or remove the dependency array.","ArrayExpression",["163"],"React Hook useEffect has missing dependencies: 'data' and 'dispatch'. Either include them or remove the dependency array.",["164"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'addCardToLS', 'data', 'dispatch', 'id', and 'isCardAvailable'. Either include them or remove the dependency array.",["165"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [changeTheme, theme]",{"range":"172","text":"173"},"Update the dependencies array to be: [platform, genre, sortBy, dispatch, data]",{"range":"174","text":"175"},"Update the dependencies array to be: [addCardToLS, data, dispatch, id, isCardAvailable, loadingStatus]",{"range":"176","text":"177"},[1156,1163],"[changeTheme, theme]",[1799,1824],"[platform, genre, sortBy, dispatch, data]",[2516,2531],"[addCardToLS, data, dispatch, id, isCardAvailable, loadingStatus]"]