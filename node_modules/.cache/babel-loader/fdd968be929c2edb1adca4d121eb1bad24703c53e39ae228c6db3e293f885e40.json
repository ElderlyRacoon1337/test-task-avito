{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const getData = createAsyncThunk(\"games/getGames\", async params => {\n  const {\n    sortBy,\n    platform,\n    genre\n  } = params;\n  const {\n    data\n  } = await axios.get(`https://www.freetogame.com/api/games?platform=${platform}&${genre && `category=${genre}&`}sort-by=${sortBy}`);\n  return data;\n});\nexport const getOneGame = createAsyncThunk(\"games/getOneGame\", async params => {\n  const {\n    id\n  } = params;\n  const {\n    data\n  } = await axios.get(`https://www.freetogame.com/api/game?id=${id}`);\n  return data;\n});\nexport let Status = /*#__PURE__*/function (Status) {\n  Status[\"LOADING\"] = \"loading\";\n  Status[\"SUCCESS\"] = \"success\";\n  Status[\"ERROR\"] = \"error\";\n  return Status;\n}({});\nconst initialState = {\n  data: [],\n  currentGameData: undefined,\n  loadingStatus: Status.LOADING,\n  gameLoadingStatus: Status.LOADING,\n  platform: \"all\",\n  genre: \"shooter\",\n  sortBy: \"relevance\"\n};\nconst gamesSlice = createSlice({\n  name: \"games\",\n  initialState,\n  reducers: {\n    setLoadingStatus(state, action) {\n      state.loadingStatus = action.payload;\n    },\n    setGameLoadingStatus(state, action) {\n      state.gameLoadingStatus = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // getdata\n    builder.addCase(getData.pending, state => {\n      state.loadingStatus = Status.LOADING;\n      state.data = [];\n    });\n    builder.addCase(getData.fulfilled, (state, action) => {\n      state.loadingStatus = Status.SUCCESS;\n      state.data = action.payload;\n    });\n    builder.addCase(getData.rejected, state => {\n      state.loadingStatus = Status.ERROR;\n      state.data = [];\n    });\n    // getone\n    builder.addCase(getOneGame.pending, state => {\n      state.gameLoadingStatus = Status.LOADING;\n      state.currentGameData = undefined;\n    });\n    builder.addCase(getOneGame.fulfilled, (state, action) => {\n      state.gameLoadingStatus = Status.SUCCESS;\n      state.currentGameData = action.payload;\n    });\n    builder.addCase(getOneGame.rejected, state => {\n      state.gameLoadingStatus = Status.ERROR;\n      state.currentGameData = undefined;\n    });\n  }\n});\nexport const {\n  setLoadingStatus,\n  setGameLoadingStatus\n} = gamesSlice.actions;\nexport default gamesSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","getData","params","sortBy","platform","genre","data","get","getOneGame","id","Status","initialState","currentGameData","undefined","loadingStatus","LOADING","gameLoadingStatus","gamesSlice","name","reducers","setLoadingStatus","state","action","payload","setGameLoadingStatus","extraReducers","builder","addCase","pending","fulfilled","SUCCESS","rejected","ERROR","actions","reducer"],"sources":["/Users/pavel/Documents/GitHub/test-task-avito/src/redux/slices/gamesSlice.ts"],"sourcesContent":["import { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport type ScreenshotType = { id: number; image: string };\n\nexport interface Game {\n  id: number;\n  title: string;\n  thumbnail: string;\n  short_description: string;\n  description: string;\n  game_url: string;\n  genre: string;\n  platform: string;\n  publisher: string;\n  developer: string;\n  release_date: string;\n  freetogame_profile_url: string;\n  screenshots: ScreenshotType[];\n  minimum_system_requirements: SystemReqsType;\n}\n\nexport type SystemReqsType = {\n  os: string;\n  processor: string;\n  memory: string;\n  graphics: string;\n  storage: string;\n};\n\nexport type GenreType =\n  | \"\"\n  | \"mmorpg\"\n  | \"shooter\"\n  | \"strategy\"\n  | \"moba\"\n  | \"racing\"\n  | \"sports\"\n  | \"social\"\n  | \"sandbox\"\n  | \"open-world\"\n  | \"survival\"\n  | \"pvp\"\n  | \"pve\"\n  | \"pixel\"\n  | \"voxel\"\n  | \"zombie\"\n  | \"turn-based\"\n  | \"first-person\"\n  | \"third-Person\"\n  | \"top-down\"\n  | \"tank\"\n  | \"space\"\n  | \"sailing\"\n  | \"side-scroller\"\n  | \"superhero\"\n  | \"permadeath\"\n  | \"card\"\n  | \"battle-royale\"\n  | \"mmo\"\n  | \"mmofps\"\n  | \"mmotps\"\n  | \"3d\"\n  | \"2d\"\n  | \"anime\"\n  | \"fantasy\"\n  | \"sci-fi\"\n  | \"fighting\"\n  | \"action-rpg\"\n  | \"action\"\n  | \"military\"\n  | \"martial-arts\"\n  | \"flight\"\n  | \"low-spec\"\n  | \"tower-defense\"\n  | \"horror\"\n  | \"mmorts\";\n\nexport type GetOneParams = {\n  id: number;\n};\n\nexport interface GamesParams {\n  platform: \"pc\" | \"browser\" | \"all\";\n  genre: GenreType;\n  sortBy: \"release-date\" | \"popularity\" | \"alphabetical\" | \"relevance\";\n}\n\nexport const getData = createAsyncThunk<Game[], GamesParams>(\n  \"games/getGames\",\n  async (params) => {\n    const { sortBy, platform, genre } = params;\n    const { data } = await axios.get(\n      `https://www.freetogame.com/api/games?platform=${platform}&${\n        genre && `category=${genre}&`\n      }sort-by=${sortBy}`\n    );\n    return data;\n  }\n);\n\nexport const getOneGame = createAsyncThunk<Game[], GetOneParams>(\n  \"games/getOneGame\",\n  async (params) => {\n    const { id } = params;\n    const { data } = await axios.get(\n      `https://www.freetogame.com/api/game?id=${id}`\n    );\n    return data;\n  }\n);\n\ninterface GamesState {\n  data: Game[];\n  currentGameData: Game | undefined;\n  loadingStatus: \"loading\" | \"success\" | \"error\";\n  gameLoadingStatus: \"loading\" | \"success\" | \"error\";\n  platform: \"pc\" | \"browser\" | \"all\";\n  genre: GenreType;\n  sortBy: \"release-date\" | \"popularity\" | \"alphabetical\" | \"relevance\";\n}\n\nexport enum Status {\n  LOADING = \"loading\",\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n}\n\nconst initialState: GamesState = {\n  data: [],\n  currentGameData: undefined,\n  loadingStatus: Status.LOADING,\n  gameLoadingStatus: Status.LOADING,\n  platform: \"all\",\n  genre: \"shooter\",\n  sortBy: \"relevance\",\n};\n\nconst gamesSlice = createSlice({\n  name: \"games\",\n  initialState,\n  reducers: {\n    setLoadingStatus(state, action: PayloadAction<Status>) {\n      state.loadingStatus = action.payload;\n    },\n    setGameLoadingStatus(state, action: PayloadAction<Status>) {\n      state.gameLoadingStatus = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    // getdata\n    builder.addCase(getData.pending, (state) => {\n      state.loadingStatus = Status.LOADING;\n      state.data = [];\n    });\n    builder.addCase(getData.fulfilled, (state, action) => {\n      state.loadingStatus = Status.SUCCESS;\n      state.data = action.payload;\n    });\n    builder.addCase(getData.rejected, (state) => {\n      state.loadingStatus = Status.ERROR;\n      state.data = [];\n    });\n    // getone\n    builder.addCase(getOneGame.pending, (state) => {\n      state.gameLoadingStatus = Status.LOADING;\n      state.currentGameData = undefined;\n    });\n    builder.addCase(getOneGame.fulfilled, (state, action) => {\n      state.gameLoadingStatus = Status.SUCCESS;\n      state.currentGameData = action.payload as unknown as Game;\n    });\n    builder.addCase(getOneGame.rejected, (state) => {\n      state.gameLoadingStatus = Status.ERROR;\n      state.currentGameData = undefined;\n    });\n  },\n});\n\nexport const { setLoadingStatus, setGameLoadingStatus } = gamesSlice.actions;\n\nexport default gamesSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}