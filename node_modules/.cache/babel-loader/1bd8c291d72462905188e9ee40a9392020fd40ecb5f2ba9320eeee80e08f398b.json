{"ast":null,"code":"var _jsxFileName = \"/Users/pavel/Documents/GitHub/test-task-avito/src/pages/MainPage/index.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ThemeContext } from \"cutie-ui\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { setCurrentPage, setGamesData } from \"../../redux/slices/pagesSlice\";\nimport { Status, getData, setLoadingStatus } from \"../../redux/slices/gamesSlice\";\nimport { createPages } from \"../../utils/createPages\";\nimport { toEngGenre } from \"../../utils/toEngGenre\";\nimport { toEngPlatform } from \"../../utils/toEngPlatform\";\nimport { toEngSortBy } from \"../../utils/toEngSortBy\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainPage = () => {\n  _s();\n  var _data$;\n  const dispatch = useAppDispatch();\n  const data = useAppSelector(state => state.games.data);\n\n  // ========================== Theme change =============================\n  // const [theme, setTheme] = useState<\"dark\" | \"light\" | \"system\">(\"system\");\n  const theme = \"system\";\n  const {\n    changeTheme\n  } = useContext(ThemeContext);\n  useEffect(() => {\n    changeTheme(theme);\n  }, [theme]);\n  // =================================================================\n\n  const [platform, setPlatform] = useState(\"Все платформы\");\n  const [genre, setGenre] = useState(\"Все\");\n  const [sortBy, setSortBy] = useState(\"Релевантности\");\n  useEffect(() => {\n    const enSortBy = toEngSortBy(sortBy);\n    const enPlatform = toEngPlatform(platform);\n    const enGenre = toEngGenre(genre);\n    dispatch(getData({\n      sortBy: enSortBy,\n      genre: enGenre,\n      platform: enPlatform\n    }));\n    dispatch(setGamesData(data));\n    dispatch(setCurrentPage(1));\n    return () => {\n      dispatch(setLoadingStatus(Status.LOADING));\n    };\n  }, [platform, genre, sortBy]);\n\n  // ========================== Pagination =============================\n  const {\n    currentPage,\n    perPage\n  } = useAppSelector(state => state.pages);\n  const totalCount = data.length;\n  const pagesCount = Math.ceil(totalCount / perPage);\n  const startIndex = (currentPage - 1) * perPage;\n  const endIndex = startIndex + perPage;\n  const currentGames = data.slice(startIndex, endIndex);\n  const pages = [];\n  createPages(pages, pagesCount, currentPage);\n  // =================================================================\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: (_data$ = data[0]) !== null && _data$ !== void 0 && _data$.title ?\n    /*#__PURE__*/\n    // <Pagination\n    //   currentPage={currentPage}\n    //   pages={pages}\n    //   pagesCount={pagesCount}\n    // />\n    _jsxDEV(_Fragment, {}, void 0, false) : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"SYKE45C4m6slxBDR9Kpg1NBleB0=\", false, function () {\n  return [useAppDispatch, useAppSelector, useAppSelector];\n});\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useContext","useEffect","useState","ThemeContext","useAppDispatch","useAppSelector","setCurrentPage","setGamesData","Status","getData","setLoadingStatus","createPages","toEngGenre","toEngPlatform","toEngSortBy","Fragment","_Fragment","jsxDEV","_jsxDEV","MainPage","_s","_data$","dispatch","data","state","games","theme","changeTheme","platform","setPlatform","genre","setGenre","sortBy","setSortBy","enSortBy","enPlatform","enGenre","LOADING","currentPage","perPage","pages","totalCount","length","pagesCount","Math","ceil","startIndex","endIndex","currentGames","slice","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pavel/Documents/GitHub/test-task-avito/src/pages/MainPage/index.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { Filters } from \"../../components/FIlters\";\nimport { ThemeContext } from \"cutie-ui\";\nimport { Items } from \"../../components/Items\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { setCurrentPage, setGamesData } from \"../../redux/slices/pagesSlice\";\nimport {\n  Status,\n  getData,\n  setLoadingStatus,\n} from \"../../redux/slices/gamesSlice\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { createPages } from \"../../utils/createPages\";\nimport { toEngGenre } from \"../../utils/toEngGenre\";\nimport { toEngPlatform } from \"../../utils/toEngPlatform\";\nimport { toEngSortBy } from \"../../utils/toEngSortBy\";\n\nexport const MainPage = () => {\n  const dispatch = useAppDispatch();\n  const data = useAppSelector((state) => state.games.data);\n\n  // ========================== Theme change =============================\n  // const [theme, setTheme] = useState<\"dark\" | \"light\" | \"system\">(\"system\");\n  const theme = \"system\";\n  const { changeTheme } = useContext(ThemeContext);\n  useEffect(() => {\n    changeTheme(theme);\n  }, [theme]);\n  // =================================================================\n\n  const [platform, setPlatform] = useState(\"Все платформы\");\n\n  const [genre, setGenre] = useState(\"Все\");\n\n  const [sortBy, setSortBy] = useState(\"Релевантности\");\n\n  useEffect(() => {\n    const enSortBy = toEngSortBy(sortBy);\n    const enPlatform = toEngPlatform(platform);\n    const enGenre = toEngGenre(genre);\n\n    dispatch(\n      getData({ sortBy: enSortBy, genre: enGenre, platform: enPlatform })\n    );\n\n    dispatch(setGamesData(data));\n    dispatch(setCurrentPage(1));\n\n    return () => {\n      dispatch(setLoadingStatus(Status.LOADING));\n    };\n  }, [platform, genre, sortBy]);\n\n  // ========================== Pagination =============================\n  const { currentPage, perPage } = useAppSelector((state) => state.pages);\n  const totalCount = data.length;\n  const pagesCount = Math.ceil(totalCount / perPage);\n  const startIndex = (currentPage - 1) * perPage;\n  const endIndex = startIndex + perPage;\n  const currentGames = data.slice(startIndex, endIndex);\n\n  const pages: number[] = [];\n  createPages(pages, pagesCount, currentPage);\n  // =================================================================\n\n  return (\n    <div className=\"container\">\n      {/* <Filters\n        platform={platform}\n        setPlatform={setPlatform}\n        genre={genre}\n        setGenre={setGenre}\n        sortBy={sortBy}\n        setSortBy={setSortBy}\n      /> */}\n      {/* <Items currentGames={currentGames} /> */}\n      {data[0]?.title ? (\n        // <Pagination\n        //   currentPage={currentPage}\n        //   pages={pages}\n        //   pagesCount={pagesCount}\n        // />\n        <></>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAEvD,SAASC,YAAY,QAAQ,UAAU;AAEvC,SAASC,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAC5D,SAASC,cAAc,EAAEC,YAAY,QAAQ,+BAA+B;AAC5E,SACEC,MAAM,EACNC,OAAO,EACPC,gBAAgB,QACX,+BAA+B;AAEtC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,MAAA;EAC5B,MAAMC,QAAQ,GAAGlB,cAAc,CAAC,CAAC;EACjC,MAAMmB,IAAI,GAAGlB,cAAc,CAAEmB,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,IAAI,CAAC;;EAExD;EACA;EACA,MAAMG,KAAK,GAAG,QAAQ;EACtB,MAAM;IAAEC;EAAY,CAAC,GAAG3B,UAAU,CAACG,YAAY,CAAC;EAChDF,SAAS,CAAC,MAAM;IACd0B,WAAW,CAACD,KAAK,CAAC;EACpB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX;;EAEA,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,eAAe,CAAC;EAEzD,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAC,eAAe,CAAC;EAErDD,SAAS,CAAC,MAAM;IACd,MAAMiC,QAAQ,GAAGpB,WAAW,CAACkB,MAAM,CAAC;IACpC,MAAMG,UAAU,GAAGtB,aAAa,CAACe,QAAQ,CAAC;IAC1C,MAAMQ,OAAO,GAAGxB,UAAU,CAACkB,KAAK,CAAC;IAEjCR,QAAQ,CACNb,OAAO,CAAC;MAAEuB,MAAM,EAAEE,QAAQ;MAAEJ,KAAK,EAAEM,OAAO;MAAER,QAAQ,EAAEO;IAAW,CAAC,CACpE,CAAC;IAEDb,QAAQ,CAACf,YAAY,CAACgB,IAAI,CAAC,CAAC;IAC5BD,QAAQ,CAAChB,cAAc,CAAC,CAAC,CAAC,CAAC;IAE3B,OAAO,MAAM;MACXgB,QAAQ,CAACZ,gBAAgB,CAACF,MAAM,CAAC6B,OAAO,CAAC,CAAC;IAC5C,CAAC;EACH,CAAC,EAAE,CAACT,QAAQ,EAAEE,KAAK,EAAEE,MAAM,CAAC,CAAC;;EAE7B;EACA,MAAM;IAAEM,WAAW;IAAEC;EAAQ,CAAC,GAAGlC,cAAc,CAAEmB,KAAK,IAAKA,KAAK,CAACgB,KAAK,CAAC;EACvE,MAAMC,UAAU,GAAGlB,IAAI,CAACmB,MAAM;EAC9B,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,UAAU,GAAGF,OAAO,CAAC;EAClD,MAAMO,UAAU,GAAG,CAACR,WAAW,GAAG,CAAC,IAAIC,OAAO;EAC9C,MAAMQ,QAAQ,GAAGD,UAAU,GAAGP,OAAO;EACrC,MAAMS,YAAY,GAAGzB,IAAI,CAAC0B,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC;EAErD,MAAMP,KAAe,GAAG,EAAE;EAC1B7B,WAAW,CAAC6B,KAAK,EAAEG,UAAU,EAAEL,WAAW,CAAC;EAC3C;;EAEA,oBACEpB,OAAA;IAAKgC,SAAS,EAAC,WAAW;IAAAC,QAAA,EAUvB,CAAA9B,MAAA,GAAAE,IAAI,CAAC,CAAC,CAAC,cAAAF,MAAA,eAAPA,MAAA,CAAS+B,KAAK;IAAA;IACb;IACA;IACA;IACA;IACA;IACAlC,OAAA,CAAAF,SAAA,mBAAI,CAAC,GAEL;EACD;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpC,EAAA,CAvEWD,QAAQ;EAAA,QACFf,cAAc,EAClBC,cAAc,EAmCMA,cAAc;AAAA;AAAAoD,EAAA,GArCpCtC,QAAQ;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}